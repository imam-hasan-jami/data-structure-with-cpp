void explainVector() {

    vector<int> v;

    v.push_back(1);     //this insert "1" inside the vector
    v.emplace_back(2);  //this also insert "2" inside the vector. "2" will be inserted after "1"

    vector<pair<int, int>> vec;

    vec.push_back({1,2});   //here we need to use curly braces
    vec.emplace_back(1,2);  //here we don't need to use curly braces

    vector<int> v(5,100);   //declared and initialized. the size of v will be 5 and it will be filled with "100" 5 times

    vector<int> v1(5,20);   //this is do the same thing like the above vector.
    vector<int> v2(v1);     //here, a new vector v2 was created and the copy of existing vector v1 will be assigned in to vector v2.

    #---iterator---#
    vector<int>::iterator it = v.begin();

    it++;
    cout << *(it) << " ";       //* basically gets the element, without the * it will get the memory location

    it = it + 2;
    cout << *(it) << " ";

    vector<int>::iterator it = v.end();     //end() will point after the last element. so for getting the last element using end(), use it--;
    vector<int>::iterator it = v.rend();    //reverse end [nobody uses this normally]
    vector<int>::iterator it = v.rbegin();  //reverse begin [nobody uses this normally]

    cout << v[0] << " " << v.at(0);     //v[0] just like array. v.at[0] is not used that much.
    cout << v.back() << " ";            //v.back() will point to the last element

    for(vector<int>::iterator it = v.begin(); it != v.end(); it++) {
        cout << *(it) << " ";
    }

    for(auto it = v.begin(); it != v.end(); it++) {         //auto will automatically assign the data type.
        cout << *(it) << " ";
    }

    for(auto it : v) {
        cout << it << " ";
    }

    #---delete---#
    //{10,20,12,23}
    v.erase(v.begin()+1);   //output: {10,12,23}  -> 20 will be deleted cause v.begin()+1 points to 20
    //{10,20,12,23,35}
    v.erase(v.begin()+2, v.begin()+4);  //output: {10,20,35}    //[start, end}      //start included but end is not included

    #---insert---#
    vector<int>v(2, 100);           //{100,100}
    v.insert(v.begin(), 300);       //{300,100,100}
    v.insert(v.begin()+1, 2, 10);   //{300,10,10,100,100}

    vector<int> copy(2, 50);        //{50,50}
    v.insert(v.begin(), copy.begin(), copy.end());  //{50,50,300,10,10,100,100}

    //{10,20}
    cout << v.size();   //2

    //{10,20}
    v.pop_back();   //{10} removes the last element which is 20 in this case.

    //v1 -> {10,20}
    //v2 -> {30,40}
    v1.swap(v2);    //v1 -> {30,40}, v2 -> {10,20}

    v.clear();  //erases the entire vector. delete all the elements inside the vector.
    cout << v.empty();  //returns true or false. if the vector is empty, it will return true otherwise false.

}